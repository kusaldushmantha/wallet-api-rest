// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mocks/types.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	responses "WalletApp/models/responses"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
	isgomock struct{}
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockWalletService) Deposit(ctx context.Context, idempotencyKey, toAccount string, amount float64, userID string) responses.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, idempotencyKey, toAccount, amount, userID)
	ret0, _ := ret[0].(responses.Response)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockWalletServiceMockRecorder) Deposit(ctx, idempotencyKey, toAccount, amount, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockWalletService)(nil).Deposit), ctx, idempotencyKey, toAccount, amount, userID)
}

// GetBalance mocks base method.
func (m *MockWalletService) GetBalance(ctx context.Context, walletID, userID string) responses.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, walletID, userID)
	ret0, _ := ret[0].(responses.Response)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletServiceMockRecorder) GetBalance(ctx, walletID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletService)(nil).GetBalance), ctx, walletID, userID)
}

// GetTransactionHistory mocks base method.
func (m *MockWalletService) GetTransactionHistory(ctx context.Context, walletID, userID string, limit, offset int32) responses.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", ctx, walletID, userID, limit, offset)
	ret0, _ := ret[0].(responses.Response)
	return ret0
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockWalletServiceMockRecorder) GetTransactionHistory(ctx, walletID, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockWalletService)(nil).GetTransactionHistory), ctx, walletID, userID, limit, offset)
}

// Transfer mocks base method.
func (m *MockWalletService) Transfer(ctx context.Context, idempotencyKey, toAccount, fromAccount string, amount float64, userID string) responses.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, idempotencyKey, toAccount, fromAccount, amount, userID)
	ret0, _ := ret[0].(responses.Response)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockWalletServiceMockRecorder) Transfer(ctx, idempotencyKey, toAccount, fromAccount, amount, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWalletService)(nil).Transfer), ctx, idempotencyKey, toAccount, fromAccount, amount, userID)
}

// Withdraw mocks base method.
func (m *MockWalletService) Withdraw(ctx context.Context, idempotencyKey, fromAccount string, amount float64, userID string) responses.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, idempotencyKey, fromAccount, amount, userID)
	ret0, _ := ret[0].(responses.Response)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWalletServiceMockRecorder) Withdraw(ctx, idempotencyKey, fromAccount, amount, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWalletService)(nil).Withdraw), ctx, idempotencyKey, fromAccount, amount, userID)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context) responses.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx)
	ret0, _ := ret[0].(responses.Response)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx)
}

// GetUsers mocks base method.
func (m *MockUserService) GetUsers(ctx context.Context) responses.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].(responses.Response)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceMockRecorder) GetUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserService)(nil).GetUsers), ctx)
}
