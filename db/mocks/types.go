// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mocks/types.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	commons "WalletApp/commons"
	models "WalletApp/models"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CheckWalletOwner mocks base method.
func (m *MockDatabase) CheckWalletOwner(ctx context.Context, walletID, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWalletOwner", ctx, walletID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWalletOwner indicates an expected call of CheckWalletOwner.
func (mr *MockDatabaseMockRecorder) CheckWalletOwner(ctx, walletID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWalletOwner", reflect.TypeOf((*MockDatabase)(nil).CheckWalletOwner), ctx, walletID, userID)
}

// CreateUserWallet mocks base method.
func (m *MockDatabase) CreateUserWallet(ctx context.Context) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWallet", ctx)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWallet indicates an expected call of CreateUserWallet.
func (mr *MockDatabaseMockRecorder) CreateUserWallet(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWallet", reflect.TypeOf((*MockDatabase)(nil).CreateUserWallet), ctx)
}

// GetTransactions mocks base method.
func (m *MockDatabase) GetTransactions(ctx context.Context, walletID string, limit, offset int32) ([]*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, walletID, limit, offset)
	ret0, _ := ret[0].([]*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockDatabaseMockRecorder) GetTransactions(ctx, walletID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockDatabase)(nil).GetTransactions), ctx, walletID, limit, offset)
}

// GetWallet mocks base method.
func (m *MockDatabase) GetWallet(ctx context.Context, walletID string) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockDatabaseMockRecorder) GetWallet(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockDatabase)(nil).GetWallet), ctx, walletID)
}

// GetWalletBalance mocks base method.
func (m *MockDatabase) GetWalletBalance(ctx context.Context, walletID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", ctx, walletID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockDatabaseMockRecorder) GetWalletBalance(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockDatabase)(nil).GetWalletBalance), ctx, walletID)
}

// GetWalletUsers mocks base method.
func (m *MockDatabase) GetWalletUsers(ctx context.Context) ([]*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletUsers", ctx)
	ret0, _ := ret[0].([]*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletUsers indicates an expected call of GetWalletUsers.
func (mr *MockDatabaseMockRecorder) GetWalletUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletUsers", reflect.TypeOf((*MockDatabase)(nil).GetWalletUsers), ctx)
}

// InsertTxnAndGetWalletBalance mocks base method.
func (m *MockDatabase) InsertTxnAndGetWalletBalance(ctx context.Context, fromAccount, toAccount string, amount float64, trsType commons.TransactionType) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTxnAndGetWalletBalance", ctx, fromAccount, toAccount, amount, trsType)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTxnAndGetWalletBalance indicates an expected call of InsertTxnAndGetWalletBalance.
func (mr *MockDatabaseMockRecorder) InsertTxnAndGetWalletBalance(ctx, fromAccount, toAccount, amount, trsType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTxnAndGetWalletBalance", reflect.TypeOf((*MockDatabase)(nil).InsertTxnAndGetWalletBalance), ctx, fromAccount, toAccount, amount, trsType)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// SetWithExpirationIfKeyIsNotSet mocks base method.
func (m *MockCache) SetWithExpirationIfKeyIsNotSet(ctx context.Context, key, value string, duration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpirationIfKeyIsNotSet", ctx, key, value, duration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWithExpirationIfKeyIsNotSet indicates an expected call of SetWithExpirationIfKeyIsNotSet.
func (mr *MockCacheMockRecorder) SetWithExpirationIfKeyIsNotSet(ctx, key, value, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpirationIfKeyIsNotSet", reflect.TypeOf((*MockCache)(nil).SetWithExpirationIfKeyIsNotSet), ctx, key, value, duration)
}
